
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { FileText, Download } from "lucide-react";
import { useTranslation } from 'react-i18next';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

interface Aircraft {
  id: string;
  callsign: string;
  status: 'operational' | 'caution' | 'critical';
  health: number;
  altitude: number;
  speed: number;
  battery: number;
  temperature: number;
  lastUpdate: string;
}

interface ReportGeneratorProps {
  aircraft: Aircraft;
}

export function ReportGenerator({ aircraft }: ReportGeneratorProps) {
  const { t } = useTranslation();

  const generateReport = () => {
    const doc = new jsPDF();
    const currentDate = new Date().toISOString().split('T')[0];
    
    // Header
    doc.setFontSize(20);
    doc.text('DRONA - Aircraft Diagnostic Report', 20, 20);
    doc.setFontSize(12);
    doc.text(`Generated: ${currentDate}`, 20, 30);
    doc.text(`Aircraft ID: ${aircraft.id}`, 20, 40);
    doc.text(`Callsign: ${aircraft.callsign}`, 20, 50);
    
    // Aircraft Status
    doc.setFontSize(16);
    doc.text('Aircraft Status Overview', 20, 70);
    
    const statusData = [
      ['Parameter', 'Value', 'Status'],
      ['Overall Health', `${aircraft.health}%`, aircraft.status.toUpperCase()],
      ['Altitude', `${aircraft.altitude} ft`, 'NORMAL'],
      ['Speed', `${aircraft.speed} knots`, 'NORMAL'],
      ['Battery Level', `${aircraft.battery}%`, aircraft.battery > 30 ? 'NORMAL' : 'LOW'],
      ['Temperature', `${aircraft.temperature}Â°F`, aircraft.temperature < 100 ? 'NORMAL' : 'HIGH'],
      ['Last Update', aircraft.lastUpdate, 'CURRENT']
    ];

    autoTable(doc, {
      startY: 80,
      head: [statusData[0]],
      body: statusData.slice(1),
      theme: 'grid',
      headStyles: { fillColor: [51, 65, 85] },
      styles: { fontSize: 10 }
    });

    // Component Health Analysis
    doc.setFontSize(16);
    doc.text('Component Health Analysis', 20, doc.lastAutoTable.finalY + 20);
    
    const componentData = [
      ['Component', 'Health %', 'Status', 'Next Maintenance'],
      ['Engine', '94', 'GOOD', '150 flight hours'],
      ['Avionics', '87', 'GOOD', '75 flight hours'],
      ['Navigation', '76', 'CAUTION', '25 flight hours'],
      ['Communication', '91', 'GOOD', '100 flight hours']
    ];

    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 30,
      head: [componentData[0]],
      body: componentData.slice(1),
      theme: 'grid',
      headStyles: { fillColor: [51, 65, 85] },
      styles: { fontSize: 10 }
    });

    // Footer
    doc.setFontSize(10);
    doc.text('This report is generated by DRONA - Defence Ready Operations for Networked Aircrafts', 20, doc.internal.pageSize.height - 20);
    doc.text('Classification: CONFIDENTIAL', 20, doc.internal.pageSize.height - 10);

    // Save the PDF
    doc.save(`DRONA_Report_${aircraft.id}_${currentDate}.pdf`);
  };

  return (
    <Card className="bg-slate-800/50 border-slate-700">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <FileText className="h-5 w-5 text-blue-400" />
          Diagnostic Report
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <p className="text-slate-300 text-sm">
            Generate a comprehensive diagnostic report for {aircraft.callsign}
          </p>
          <Button 
            onClick={generateReport}
            className="w-full bg-blue-600 hover:bg-blue-700"
          >
            <Download className="h-4 w-4 mr-2" />
            Generate PDF Report
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
